#!/usr/bin/ruby

require 'fileutils'
require 'json'
require 'rubygems'

$stdout = STDERR

input = JSON.load($stdin.read, nil, { symbolize_names: true, create_additions: false })

unless input[:source] && input[:source][:stage] && input[:source][:private_key] && input[:params] && input[:params][:path]
  missing = []
  missing << :stage unless input[:source][:stage]
  missing << :private_key unless input[:source][:private_key]
  missing << :path unless input[:params][:path]

  puts("Missing required settings: #{missing.map{ |s| "'#{s}'" }.join(', ') }")

  exit 1
end

private_key_path = '/tmp/capistrano-resource-private-key'

File.write(private_key_path, input[:source][:private_key])
File.chmod(0600, private_key_path)

output = %x| ssh-agent |
output.split("\n").each do |line|
  assignment ,= line.split(';')
  key, value = assignment.split('=')
  ENV[key] = value
end


%x| DISPLAY= ssh-add #{private_key_path} > /dev/null |

current_dir = Dir.pwd

Dir.chdir("#{ARGV.first}/#{input[:params][:path]}")

gem 'bundler'
require 'bundler/cli'

Bundler::CLI.new(
  [],
  { 'no-color': false, retry: 3, verbose: false },
  { current_command: Bundler::Thor::Command.new(:install, '', '', '') }
).invoke(:install)

Bundler::CLI.new(
  [ 'cap', input[:source][:stage], 'deploy' ],
  { 'no-color': false, retry: 3, verbose: false },
  { current_command: Bundler::Thor::Command.new(:exec, '', '', '') }
).invoke(:exec)

Dir.chdir(current_dir)

$stdout = STDOUT

puts({ version: { ref: :none }, metadata: [] }.to_json)